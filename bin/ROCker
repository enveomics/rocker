#!/usr/bin/env ruby

# @author  Luis M. Rodriguez-R <lmrodriguezr at gmail dot com>
# @author  Luis (Coto) Orellana
# @license Artistic-2.0

lib = File.expand_path("../lib", File.dirname(__FILE__))
$:.push lib if Dir.exist? lib
require "rocker"
require "optparse"


#================================[ Options parsing ]
$t = {
   "build"   => "Creates in silico metagenomes and training sets from " +
   		"reference genomes.",
   "compile" => "Identifies the most discriminant bit-score per alignment " +
   		"position in a set of sequence.",
   "search"  => "Uses a ROCker compilation to identify reads putatively " +
   		"derived from a set of sequences.",
   "filter"  => "Uses a pre-compiled set of bit-score thresholds to filter " +
   		"a search result.",
   "plot"    => "Generates a graphical representation of the alignment, the " +
   		"thresholds, and the hits.",
   "info"    =>	"Display additional information about ROCker."
}

if %w[-V --version].include? ARGV.first
   task = "info"
else
   task = (ARGV.empty? ? "" : ARGV.shift).downcase
   ARGV << "-h" if ARGV.empty? and task != "info"
end

o = {}
opts = OptionParser.new do |opt|
   if $t.keys.include? task
      opt.banner = "Usage: ROCker #{task} [options]"
      opt.separator ""
      opt.separator $t[task]
      opt.separator ""
   end
   case task
   when "build"
      unless ROCker.has_build_gems?
	 opt.separator "+ UNSATISFIED REQUIREMENTS"
	 opt.separator "    The building task requires uninstalled gems, please"
	 opt.separator "    install them executing:"
	 opt.separator "       gem install rest_client"
	 opt.separator ""
      end
      opt.separator "+ BUILDING ARGUMENTS"
      opt.on("-p", "--positive ID1,ID2,ID3", Array,
	 "Comma-separated list of UniProtKB IDs corresponding to the positive ",
	 "training set. Required unless -P or -a are used."
	 ){ |v| o[:positive]=v }
      opt.on("-n", "--negative ID1,ID2,ID3", Array,
	 "Comma-separated list of UniProtKB IDs corresponding to the negative ",
	 "training set. See also -N."){ |v| o[:negative]=v }
      opt.on("-o", "--baseout PATH",
	 "Prefix for the output files to be generated. Required."
	 ){ |v| o[:baseout]=v }
      
      opt.separator ""
      opt.separator "+ ADVANCED BUILDING ARGUMENTS"
      opt.on("-P", "--positive-file PATH",
	 "File containing the positive set, one UniProtKB ID per line.",
	 "If used, -p is not required."){ |v| o[:posfile]=v }
      opt.on("-N", "--negative-file PATH",
	 "File containing the negative set, one UniProtKB ID per line."
	 ){ |v| o[:negfile]=v }
      opt.on("-a", "--alignment PATH",
	 "Protein alignment of the reference sequences. The defline must have",
	 "UniProtKB IDs. If used, -p is not required."){ |v| o[:aln]=v }
      opt.on("-s", "--seqdepth NUMBER",
	 "Sequencing depth (reads/bp) to be used in building the in silico" +
	 "metagenome.", "By default: '" + ROCker.default(:seqdepth).to_s +
	 "'."){ |v| o[:seqdepth]=v.to_f }
      opt.on("-l", "--readlen INTEGER",
	 "Average read length of in silico metagenome (in bp).",
	 "By default: '" + ROCker.default(:readlen).to_s + "'."
	 ){ |v| o[:readlen]=v.to_i }
      opt.on("-v", "--overlap INTEGER",
	 "Minimum overlap (in bp) with reference gene to tag a positive read.",
	 "By default: '" + ROCker.default(:minovl).to_s +
	 "'."){ |v| o[:minovl]=v.to_i }
      opt.on("--per-taxon RANK",
	 "Use only one genome per taxon to build the metagenome.",
	 "Valid ranks include: species, genus, family, order, class, phylum."
	 ){ |v| o[:pertaxon]=v.downcase }
      opt.on("--nosimulate",
	 "Do not simulate metagenome. It implies --nosearch.",
	 "By default, metagenome is simulated."){ |v| o[:nosimulate]=v }
      opt.on("--nosearch",
	 "Do not execute similarity search. By default it's executed."
	 ){ |v| o[:nosearch]=v }
      opt.on("--noalignment",
	 "Do not align reference set. By default references are aligned."
	 ){ |v| o[:noaln]=v }
      opt.on("--nocleanup",
	 "Keep all intermediate files. By default temporal files are removed."
	 ){ |v| o[:noclean]=v }
      opt.on("--reuse-files",
	 "Re-use existing result files. By default existing files are ignored."
	 ){ |v| o[:reuse]=true }
      opt.on("--keep-unlinked",
         "Keep genomes with unlinked positive coordinates (missing references)."
         ){ |v| o[:keep_unlinked] = v }
      
      opt.separator ""
      opt.separator "+ EXTERNAL SOFTWARE OPTIONS"
      opt.on("--search STR",
	 "Similarity search algorithm to use. Supported: blast and diamond",
	 "By default: '" + ROCker.default(:search).to_s + "'."
	 ){ |v| o[:search]=v.to_sym }
      opt.on("--simulator STR",
	 "In silico metagenome simulator to use. Supported: grinder.",
	 "By default: '" + ROCker.default(:simulator).to_s + "'."
	 ){ |v| o[:simulator]=v.to_sym }
      opt.on("--aligner STR",
	 "Multiple alignment algorithm to use. Supported: clustalo and muscle.",
	 "By default: '" + ROCker.default(:aligner).to_s + "'."
	 ){ |v| o[:aligner]=v.to_sym }
      opt.on("--search-bins PATH",
	 "Path to the similarity search executables. By default in $PATH: '" +
	 ROCker.default(:searchbins) + "'."
	 ){ |v| o[:searchbins]=v }
      opt.on("--simulator-bin PATH",
	 "Path to the simulator executable. By default in $PATH: '" +
	 ROCker.default(:simulatorbin).values.join("' or '") + "'."
	 ){ |v| o[:simulatorbin]=v }
      opt.on("--aligner-bin PATH",
	 "Path to the aligner executable. By default in $PATH: '" +
	 ROCker.default(:alignerbin).values.join("' or '") + "'."
	 ){ |v| o[:alignerbin]=v }
      opt.on("--search-cmd STR",
	 "Command for similarity search, where %1$s: binaries, %2$s: program,",
	 "%3$s: input, %4$s: database, %5$s: output, %6$d: threads.",
	 *ROCker.default(:searchcmd).keys.map do |k|
	    ["By default if --search #{k}:", "'" +
	       ROCker.default(:searchcmd)[k] + "'"]
	 end.flatten ){ |v| o[:searchcmd]=v }
      opt.on("--makedb-cmd STR",
	 "Command calling database formater for similarity search, where",
	 "%1$s: binaries, %2$s: dbtype, %3$s: input, %4$s: database.",
	 *ROCker.default(:makedbcmd).keys.map do |k|
	    ["By default if --search #{k}:", "'" +
	       ROCker.default(:makedbcmd)[k] + "'"]
	 end.flatten ){ |v| o[:makedbcmd]=v }
      opt.on("--simulator-cmd STR",
	 "Command calling simulator, where %1$s: binary, %2$s: input,",
	 "%3$s: seq. depth (X), %4$d: read len., %5$s: output file, " +
         "%6$s: output dir.",
	 *ROCker.default(:simulatorcmd).keys.map do |k|
	    ["By default if --simulator #{k}:", "'" +
	       ROCker.default(:simulatorcmd)[k] + "'"]
	 end.flatten ){ |v| o[:simulatorcmd]=v }
      opt.on("--aligner-cmd STR",
	 "Command calling aligner, where %1$s: binary, %2$s: input,",
	 "%3$s: output, %4$d: threads.",
	 *ROCker.default(:alignercmd).keys.map do |k|
	    ["By default if --aligner #{k}:", "'" +
	       ROCker.default(:alignercmd)[k] + "'."]
	 end.reduce([],:+) ){ |v| o[:alignercmd]=v }
   when "compile"
      opt.separator "+ COMPILATION ARGUMENTS"
      opt.on("-l", "--readlen INTEGER",
	 "Average read length used in the compile step (Mandatory)."
	 ){ |v| o[:readlen] = v.to_i }
      opt.on("-a", "--alignment PATH",
	 "Protein alignment of the reference sequences. Required."
	 ){ |v| o[:aln]=v }
      opt.on("-b", "--ref-blast PATH",
	 "Tabular BLAST (blastx) of the test reads vs. the reference dataset.",
	 "Required unless -T exists."){ |v| o[:blast]=v }
      opt.on("-k", "--rocker PATH",
	 "ROCker file to be created. Required."){ |v| o[:rocker]=v }
      
      opt.separator ""
      opt.separator "+ ADVANCED COMPILATION ARGUMENTS"
      opt.on("-T", "--table PATH",
	 "Formated tabular file to be created (or reused).",
	 "Required unless -b is provided."){ |v| o[:table]=v }
      opt.on("--min-score NUMBER",
	 "Minimum Bit-Score to consider a hit. By default: " +
	 ROCker.default(:minscore).to_s){ |v| o[:minscore]=v.to_f }
      opt.on("--norefine",
	 "Do not refine windows."){ o[:refine]=false }
      opt.on("-w", "--window INT",
	 "Initial size of alignment windows (in number of AA columns). ",
	 "By default: " + ROCker.default(:win).to_s + "."
	 ){ |v| o[:win]=v.to_i }
      opt.on("--reuse-files",
	 "Re-use existing result files. By default, existing files are " +
	 "ignored."){ |v| o[:reuse]=true }
      opt.separator ""
      opt.separator "+ INPUT/OUTPUT"
      opt.separator "   o The input alignment (-a) MUST be in FastA format, " +
	 "and the IDs must"
      opt.separator "     coincide with those from the BLAST (-b)."
      opt.separator "   o The input BLAST (-b) MUST be in tabular format. " +
	 "True positives must"
      opt.separator "     contain the string '@%' somewhere in the query ID."
      opt.separator "   o The table file (-T) should be tab-delimited and " +
	 "contain six columns:"
      opt.separator "      1. Subject ID."
      opt.separator "      2. Start of alignment in subject (translated to " +
	 "alignment column)."
      opt.separator "      3. End of alignment in subject (translated to " +
	 "alignment column)."
      opt.separator "      4. Bit score."
      opt.separator "      5. A number indicating if it was a true (1) or a " +
	 "false (0) positive."
      opt.separator "      6. Mid-point of the alignment in the reference " +
	 "sequence."
      opt.separator "   o The ROCker file (-k) is a tab-delimited file " +
	 "containing five columns:"
      opt.separator "      1. First column of the window in the alignment."
      opt.separator "      2. Last column of the window in the alignment."
      opt.separator "      3. Number of positives in the window (hits)."
      opt.separator "      4. Number of true positives in the window."
      opt.separator "      5. Bit score threshold set for the window."
      opt.separator "     The file also contains the alignment (commented " +
	 "with #:)."
      opt.separator ""
   when "search"
      opt.separator "+ SEARCHING ARGUMENTS"
      opt.on("-k", "--rocker PATH",
	 "ROCker file generated by the compile task (-k). " +
	 "Required."){ |v| o[:rocker]=v }
      opt.on("-i", "--query PATH",
	 "File containing the query sequences in FastA format. " +
	 "Required."){ |v| o[:query]=v }
      opt.on("-o", "--out-blast PATH",
	 "Filtered tabular BLAST to be created. Required."){ |v| o[:oblast]=v }
      opt.on("-x", "--query-blast PATH",
	 "Unfiltered tabular BLAST. By default, this file is not " +
	 "kept."){ |v| o[:qblast]=v }
      opt.on('-L', '--length-correction',
         'Apply read-length correction to bit scores.'){ |v| o[:lencorr] = v }
      opt.on('-M', '--max-length-correction FLOAT',
         'Maximum length correction, as a read length fraction.',
         'By default: 0.4.'){ |v| o[:lencorr_max] = v.to_f }
      opt.on('-P', '--length-correction-penalty FLOAT',
         'Penalty for length correction. By default uses the triangle method.',
         'Recommended value: 0.5.'){ |v| o[:lencorr_pen] = v.to_f }

      opt.separator ""
      opt.separator "+ EXTERNAL SOFTWARE OPTIONS"
      opt.on("--search STR",
	 "Similarity search algorithm to use. Supported: 'blast' and " +
	 "'diamond'. By default: '" + ROCker.default(:search).to_s +
	 "'.") { |v| o[:search]=v.to_sym }
      opt.on("--search-bins PATH",
	 "Path to the similarity search executables. By default in the " +
	 "$PATH: '" + ROCker.default(:searchbins) +
	 "'.") { |v| o[:searchbins]=v }
      opt.on("--search-cmd STR",
	 "Command calling similarity search, where %1$s: binaries, %2$s: " +
	 "program, %3$s: input, %4$s: database, %5$s: output, %6$d: threads.",
	 *ROCker.default(:searchcmd).keys.map do |k|
	    ["By default if --search #{k}:",
               "'" + ROCker.default(:searchcmd)[k] + "'"]
	 end.flatten ){ |v| o[:searchcmd]=v }
      opt.on("--makedb-cmd STR",
	 "Command calling database format for similarity search, where %1$s: " +
	 "binaries, %2$s: dbtype, %3$s: input, %4$s: database.",
	 *ROCker.default(:makedbcmd).keys.map do |k|
	    ["By default if --search #{k}:",
               "'" + ROCker.default(:makedbcmd)[k] + "'" ]
	 end.flatten ){ |v| o[:makedbcmd]=v }

   when "filter"
      opt.separator "+ FILTERING ARGUMENTS"
      opt.on("-k", "--rocker PATH",
	 "ROCker file generated by the compile task (-k). " +
	 "Required."){ |v| o[:rocker]=v }
      opt.on("-x", "--query-blast PATH",
	 "Tabular BLAST (blastx) of the query reads vs. the reference " +
	 "dataset. Required."){ |v| o[:qblast]=v }
      opt.on("-o", "--out-blast PATH",
	 "Filtered tabular BLAST to be created. Required."){ |v| o[:oblast]=v }
      opt.on('-L', '--length-correction PATH',
         'Path to the query reads, used to apply read-length correction to ' +
         'bit scores.'){ |v| o[:lencorr] = v }
      opt.on('-M', '--max-length-correction FLOAT',
         'Maximum length correction, as a read length fraction.',
         'By default: 0.4.'){ |v| o[:lencorr_max] = v.to_f }
      opt.on('-P', '--length-correction-penalty FLOAT',
         'Penalty for length correction. By default uses the triangle method.',
         'Recommended value: 0.5.'){ |v| o[:lencorr_pen] = v.to_f }

   when "plot"
      opt.separator "+ PLOTTING ARGUMENTS"
      opt.on("-k", "--rocker PATH",
	 "ROCker file generated by the compile task (-k). " +
	 "Required."){ |v| o[:rocker]=v }
      opt.on("-b", "--ref-blast PATH",
	 "Tabular BLAST (blastx) of the test reads vs. the reference " +
	 "dataset. Required unless -T exists."){ |v| o[:blast]=v }
      opt.on("-o", "--plot-file PATH",
	 "File to be created with the plot. By default: value of -k + " +
	 "'.' + value of -f."){ |v| o[:gout]=v }
      
      opt.separator ""
      opt.separator "+ ADVANCED PLOTTING ARGUMENTS"
      opt.on("-T", "--table PATH",
	 "Formated tabular file to be created (or reused). Required " +
	 "unless -b is provided."){ |v| o[:table]=v }
      opt.on("--color", "Color alignment by amino acid."){ o[:color]=true }
      opt.on("--tag-negatives",
	 "Mark hits from negative references."){ o[:tag_negatives] = true }
      opt.on("--no-transparency",
	 "Do not use (semi-)transparencies."){ |v| o[:transparency] = v }
      opt.on("--min-score NUMBER",
	 "Minimum Bit-Score to consider a hit. By default: " +
	 ROCker.default(:minscore).to_s + "."){ |v| o[:minscore]=v.to_f }
      opt.on("--stats-impact",
	 "Plot impact on statistics, instead of absolute values per " +
	 "window."){ o[:impact]=true }
      opt.on("--stats-ylim STRING",
	 "Limits of the Y-axis in the bottom panel. By default: '-2,.1' " +
	 "if --stats-impact is set, '50,100' otherwise."){ |v| o[:ylim]=v }
      opt.on("-s", "--subject SBJ1,SBJ2,...", Array,
      	"Plot only information regarding this(ese) subject(s). If multiple, " +
	"separate by comma. By default, all hits are plotted."){ |v| o[:sbj]=v }
      opt.on("-f", "--plot-format STRING",
      	"Format of the plot file. Supported values: pdf (default), png, " +
	"jpeg, and tiff."){ |v| o[:gformat]=v }
      opt.on("-W", "--width NUMBER",
	 "Width of the plot in inches. By default: " +
	 ROCker.default(:width).to_s +
	 "."){ |v| o[:width]=v.to_f }
      opt.on("-H", "--height NUMBER",
	 "Height of the plot in inches. By default: " +
	 ROCker.default(:height).to_s +
	 "."){ |v| o[:width]=v.to_f }

   else
      opt.banner = "Usage: ROCker.rb [task] [options]"
      opt.separator ""
      opt.separator "Please specify one of the following tasks:"
      $t.keys.each{ |t| opt.separator "     #{t}:\t#{$t[t]}" }
   end # case task
   
   opt.separator ""
   opt.separator "+ GENERAL ARGUMENTS"
   opt.on("-t", "--threads INT",
      "Number of threads to use. By default: " + ROCker.default(:thr).to_s +
      "."){ |v| o[:thr]=v.to_i }
   opt.on("-R", "--path-to-r PATH",
      "Path to the R executable to be used. By default: '" +
      ROCker.default(:r) + "'."){ |v| o[:r]=v }
   opt.on("-q", "--quiet", "Run quietly."){ |v| o[:q]=true }
   opt.on("-d", "--debug",
      "Display debugging information."){ |v| o[:debug]=true }
   opt.on("-h", "--help", "Display this screen.") do
      puts opt
      exit
   end
   opt.on("-V", "--version","Display version.") do
      puts "ROCker v" + ROCker.VERSION
      exit
   end
   opt.separator ""
   unless $t.include? task
      puts opt
      exit
   end
end
opts.parse!

#================================[ Main ]
rocker = ROCker.new(o)
begin
   case task
   when "build"
      rocker.build!
   when "compile"
      rocker.compile!
   when "filter"
      rocker.filter!
   when "search"
      rocker.search!
   when "plot"
      rocker.plot!
   when "info"
      puts "ROCker v" + ROCker.VERSION
      puts ""
      puts "If you use ROCker in your research, please cite:"
      puts ROCker.CITATION("\n")
      puts ""
      puts "ROCker can be freely used and distributed under the "
      puts "terms of the Artistic License 2.0. See LICENSE.txt."
      puts ""
      puts "For additional information and documentation, visit:"
      puts "http://enve-omics.ce.gatech.edu/rocker/"
      puts ""
      puts "For our list of curated models, visit:"
      puts "http://enve-omics.ce.gatech.edu/rocker/models"
   end
rescue => err
   $stderr.puts "Exception: #{err}\n\n"
   err.backtrace.each { |l| $stderr.puts l + "\n" }
   err
end


